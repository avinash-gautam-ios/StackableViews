{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19480\viewh14020\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl360\slmult1\pardirnatural\partightenfactor0

\f0\fs32 \cf0 \

\f1\b\fs42 Stackable Component (UIStackable)
\f0\b0\fs34 \
\
This library provides flexibility to show stackable card views with minimal effort. Control it using configuration such as max height, min height and max number of items the stack can hold. \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f1\b Public Components\

\f0\b0 These are the classes exposed outside the framework.\
\
1. 
\f1\b UIStackableController
\f0\b0 : This is the class which you will use to instantiate your stack. Configure it using 
\f1\b UIStackableControllerConfiguration
\f0\b0  instance. \
\
2. 
\f1\b UIStackableControllerConfiguration: 
\f0\b0 This is the place where you can define your stack controller configuration. Choose from setting maxHeight, minHeight, backdropAlpha, etc.\
\
3. 
\f1\b UIStackable: 
\f0\b0 For any view controller to be used on the stackController must conform to this protocol. This protocol provides updates about item lifecycle, such as when it is about to be presented/ dismissed or state updates. \
\
4. 
\f1\b UIStackableState: 
\f0\b0 This is used to identify the state of the current item on the stack. A state is marked as `collapsed` when current item moves to back of top item and marked as `expanded ` when current item is the top most item.\
\
5. 
\f1\b UIStackableConfiguration: 
\f0\b0 Use this to provide configuration to the current stack item, such as corner radius, shadow, background color, etc. \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f1\b\fs38 Internal Components
\fs34 \

\f0\b0 These are the classes internal to the Stackable Component. For now, they sit simply, can be moved inside a pod or framework and marked as `internal`.\
\
1. 
\f1\b UIStackableContainerView: 
\f0\b0 This is the container view, which facilitates height calculation, animation for the stackable views.\
\
2. 
\f1\b UIStackedDatasource:
\f0\b0  This is a helper class which directly manages the stacked items, such as root, top, etc.\
\
3. 
\f1\b UIStackableContainerViewConfiguration
\f0\b0 : This is configuration struct for the `
\f1\b UIStackableContainerView 
\f0\b0 ` . Contains properties used by container view for computation.\
\
4. 
\f1\b UIStackableConstants: 
\f0\b0 This contains the constants used across the component for easy  to reuse purpose and future mutability.\
\
5. 
\f1\b UIStackableControllerError
\f0\b0 : This contains the common errors generated for push/ pop operations on the stack.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\f1\b\fs40 Future Scope
\f0\b0\fs34 \
Following can be considered as future improvement features to this component. \
1. Respect scrollable content itself inside the stackable item view\
2. Respect for Safe area layout guide\
3. Animation flexibility with spring animations\
4. More styling options\

\fs32 5. Support for behaviour, such as it should be in sheet form or full screen as part individual item configuration\
}